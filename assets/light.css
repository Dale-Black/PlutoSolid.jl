body {
    /* background-color: #ffffff; */
    font-family: 'Open Sans', serif;
    font-weight: 400;
    color: hsl(0, 0%, 25%);
}

body.swoosh {
    animation: ðŸŒˆ 30s linear 0s infinite;

}

h1,
h2,
h3,
h4,
h5,
h6 {
    font-family: 'Roboto Slab', serif;
    color: hsl(0, 0%, 12%);
}
h1:first-child,
h2:first-child,
h3:first-child,
h4:first-child,
h5:first-child,
h6:first-child {
    margin-block-start: 0px;
}

p {
    margin-block-start: 8px;
}

p {
    margin-block-end: 20px;
}

p:first-child {
    margin-block-start: 0px;
}

p:last-child {
    margin-block-end: 0px;
}


/* HEADER */


/* MAIN */

cell {
    margin-top:20px;
    position: relative;
}

cell:focus-within {
    /* box-shadow: 0px 0px 12px -4px rgba(0, 0, 0, 0.2); */
    /* box-shadow: 0px 0px 12px -4px rgba(0, 0, 0, 0.8); */
    /* border-left: 4px solid hsl(0, 0%, 0%); */
}

celloutput {
    background-color: white;
    /* border: 1px solid rgba(0, 0, 0, .1); */
    /* border-top-left-radius: 4px; */
    /* border-top-right-radius: 4px; */
}

celloutput:focus {
    outline: none;
}

code {
    font-family: 'Roboto Mono', monospace;
    font-size: 12px;
}

.errormessage {
    color: darkred;
    font-weight: bold;
}

.CodeMirror {
    font-family: 'Roboto Mono', monospace !important;
    font-size: 14px;
    border-bottom-left-radius: 4px;
    border-bottom-right-radius: 4px;
    border: 1px solid rgba(0,0,0,.1);
    /* border-top: none; */
    width: auto;
}

cell > button, cellinput > button {
    margin: 0px;
    border: none;
    background: none;
    cursor: pointer;
    color: hsl(204, 86%, 35%);
    font-family: 'Segoe UI Emoji', 'Roboto Mono', monospace;
    position: absolute;
    z-index: 3; /* CodeMirror is 2 */
}
cell > button.addcell {
    /* width: 100%; */
    font-family: 'Roboto Mono', monospace;
    /* font-style: italic; */
    height:20px;
    left: -11px;
}

@media (any-pointer: fine), (any-pointer: caorse){
    cell > button, cellinput > button {
        opacity: 0%;
        /* to make it feel smooth: */
        transition: opacity .25s ease-in-out;
    }

    cell:hover > button, cell:hover > cellinput > button {
        opacity: 25%;
    }
    
}
cell > button:hover, cell > cellinput > button:hover {
    opacity: 100%;
    /* to make it feel snappy: */
    transition: opacity .05s ease-in-out;
}

cell > button.addcell.before {
    margin-top: -20px !important;
}

cell > button > span {
    /* background: rgba(0,0,0,.1); */
}

cellinput > button.runcell {
    font-weight: 500;
    right: 0px;
}

cellinput > button.deletecell {
    right: 20px;
}

trafficlight {
    border-top-left-radius: 4px;
    border-bottom-left-radius: 4px;
    transition: background .15s ease-in-out;
}

cell:hover > trafficlight {
    background: rgba(0,0,0,.1);
    transition: background .05s ease-in-out;

}

cell.running > trafficlight {
    background: repeating-linear-gradient(
        -45deg,
        hsla(20, 20%, 80%, 1),
        hsla(20, 20%, 80%, 1) 8px,
        hsla(20, 20%, 80%, .1) 8px,
        hsla(20, 20%, 80%, .1) 16px
      );
    background-size: 4px 22.62741699797px; /* 16 * sqrt(2) */
    animation: 2s linear 0s infinite running scrollbackground;
}

@keyframes scrollbackground {
    0%{
        background-position-y: 0px;
    }
    100%{
        background-position-y: 22.62741699797px; /* 16 * sqrt(2) */
    }
}

cell.dependent > trafficlight {
    background: lightblue;
}

cell.warning > trafficlight {
    background: hsl(39, 100%, 75%);
}

cell.error > trafficlight {
    background: hsl(0, 100%, 71%);
}

cell:hover > cellinput > .CodeMirror,
cell.dependent > cellinput > .CodeMirror,
cell.warning > cellinput > .CodeMirror,
cell.error > cellinput > .CodeMirror {
    border-left: none;
    padding-left: 1px;
    border-bottom-left-radius: 0px;
}



@keyframes ðŸŒˆ {
    from {
        background-color: hsl(0, 100%, 98%);
    }

    10% {
        background-color: hsl(90, 100%, 98%);
    }

    50% {
        background-color: hsl(180, 100%, 98%);
    }

    75% {
        background-color: hsl(270, 100%, 98%);
    }

    100% {
        background-color: hsl(360, 100%, 98%);
    }
}



/* CODEMIRROR STYLE */

/*
Based on "ParaÃ­so (Light)" by Jan T. Sott:
    Color scheme by Jan T. Sott (https://github.com/idleberg/Paraiso-CodeMirror)
    Inspired by the art of Rubens LP (http://www.rubenslp.com.br)
*/

.cm-s-default.CodeMirror { background: hsla(46, 100%, 98%, 1); color: #41323f; }
.cm-s-default div.CodeMirror-selected { background: #b9b6b0; }
.cm-s-default .CodeMirror-line::selection, .cm-s-default .CodeMirror-line > span::selection, .cm-s-default .CodeMirror-line > span > span::selection { background: #b9b6b0; }
.cm-s-default .CodeMirror-line::-moz-selection, .cm-s-default .CodeMirror-line > span::-moz-selection, .cm-s-default .CodeMirror-line > span > span::-moz-selection { background: #b9b6b0; }
.cm-s-default .CodeMirror-gutters { background:  hsl(46, 100%, 98%); border-right: solid 1px hsla(0, 0%, 0%, .0); }
.cm-s-default .CodeMirror-guttermarker { color: black; }
.cm-s-default .CodeMirror-guttermarker-subtle { color: #8d8687; }
.cm-s-default .CodeMirror-linenumber { color: #8d8687; }
.cm-s-default .CodeMirror-cursor { border-left: 1px solid #776e71; }

.cm-s-default span.cm-comment { color: #e96ba8; font-style: italic;}
.cm-s-default span.cm-atom { color: #815ba4; }
.cm-s-default span.cm-number { color: #815ba4; }

.cm-s-default span.cm-property, .cm-s-default span.cm-attribute { color: #48b685; }
.cm-s-default span.cm-keyword { color: #ef6155; }
.cm-s-default span.cm-string { color: #ce7d0a; }

.cm-s-default span.cm-variable { color: #5668a4; font-weight: 500;}
.cm-s-default span.cm-builtin { color: #5e7ad3; font-weight: 500;}
.cm-s-default span.cm-variable-2 { color: #06b6ef; }
.cm-s-default span.cm-def { color: #f99b15; }
.cm-s-default span.cm-bracket { color: #41323f; }
.cm-s-default span.cm-tag { color: #ef6155; }
.cm-s-default span.cm-link { color: #815ba4; }
.cm-s-default span.cm-error { background: #ef6155; color: #776e71; }

.cm-s-default .CodeMirror-activeline-background { background: #CFD1C4; }
.cm-s-default .CodeMirror-matchingbracket { text-decoration: underline; color: white !important; }

.cm-s-default.CodeMirror-empty { color: rgba(0,0,0,.2); font-style: italic;}